/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface AuiButton {
    'color': 'primary' | 'accent' | 'light';
    'disabled': boolean;
    'label': string;
    'shape': 'square' | 'round';
    'size': 'small' | 'default' | 'large';
    'type': 'button' | 'reset' | 'submit';
    'variant': 'outlined' | 'contained';
  }
  interface AuiCollapse {
    'color': string;
    'description': string;
    'label': string;
    'width': string;
  }
  interface AuiInput {}
  interface AuiPaper {
    'defaultStyle': string;
  }
  interface AuiText {
    'label': string;
    'variant': 'h1' | 'h2' | 'h3' | 'h4' | 'headline' | 'title' | 'subheading' | 'body2' | 'body1' | 'caption';
  }
}

declare global {


  interface HTMLAuiButtonElement extends Components.AuiButton, HTMLStencilElement {}
  var HTMLAuiButtonElement: {
    prototype: HTMLAuiButtonElement;
    new (): HTMLAuiButtonElement;
  };

  interface HTMLAuiCollapseElement extends Components.AuiCollapse, HTMLStencilElement {}
  var HTMLAuiCollapseElement: {
    prototype: HTMLAuiCollapseElement;
    new (): HTMLAuiCollapseElement;
  };

  interface HTMLAuiInputElement extends Components.AuiInput, HTMLStencilElement {}
  var HTMLAuiInputElement: {
    prototype: HTMLAuiInputElement;
    new (): HTMLAuiInputElement;
  };

  interface HTMLAuiPaperElement extends Components.AuiPaper, HTMLStencilElement {}
  var HTMLAuiPaperElement: {
    prototype: HTMLAuiPaperElement;
    new (): HTMLAuiPaperElement;
  };

  interface HTMLAuiTextElement extends Components.AuiText, HTMLStencilElement {}
  var HTMLAuiTextElement: {
    prototype: HTMLAuiTextElement;
    new (): HTMLAuiTextElement;
  };
  interface HTMLElementTagNameMap {
    'aui-button': HTMLAuiButtonElement;
    'aui-collapse': HTMLAuiCollapseElement;
    'aui-input': HTMLAuiInputElement;
    'aui-paper': HTMLAuiPaperElement;
    'aui-text': HTMLAuiTextElement;
  }
}

declare namespace LocalJSX {
  interface AuiButton {
    'color'?: 'primary' | 'accent' | 'light';
    'disabled'?: boolean;
    'label'?: string;
    'onClickEvent'?: (event: CustomEvent<any>) => void;
    'shape'?: 'square' | 'round';
    'size'?: 'small' | 'default' | 'large';
    'type'?: 'button' | 'reset' | 'submit';
    'variant'?: 'outlined' | 'contained';
  }
  interface AuiCollapse {
    'color'?: string;
    'description'?: string;
    'label'?: string;
    'onOnToggle'?: (event: CustomEvent<any>) => void;
    'width'?: string;
  }
  interface AuiInput {}
  interface AuiPaper {
    'defaultStyle'?: string;
  }
  interface AuiText {
    'label'?: string;
    'variant'?: 'h1' | 'h2' | 'h3' | 'h4' | 'headline' | 'title' | 'subheading' | 'body2' | 'body1' | 'caption';
  }

  interface IntrinsicElements {
    'aui-button': AuiButton;
    'aui-collapse': AuiCollapse;
    'aui-input': AuiInput;
    'aui-paper': AuiPaper;
    'aui-text': AuiText;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'aui-button': LocalJSX.AuiButton & JSXBase.HTMLAttributes<HTMLAuiButtonElement>;
      'aui-collapse': LocalJSX.AuiCollapse & JSXBase.HTMLAttributes<HTMLAuiCollapseElement>;
      'aui-input': LocalJSX.AuiInput & JSXBase.HTMLAttributes<HTMLAuiInputElement>;
      'aui-paper': LocalJSX.AuiPaper & JSXBase.HTMLAttributes<HTMLAuiPaperElement>;
      'aui-text': LocalJSX.AuiText & JSXBase.HTMLAttributes<HTMLAuiTextElement>;
    }
  }
}


